import whatthepatch as wp


class coalaPatch:
    """
    coalaPatch processes the diff fixes
    generated by coala core. It provides
    an abstract way to use those patches.
    """

    @staticmethod
    def join_parts(parts):
        """
        Join lines to form text.

        :param parts:
            The array of lines to join.
        :return:
            The joined text.
        """
        # TODO Support joining on all platforms.
        # i.e support \r, \n, \r\n.
        return '\n'.join(list(parts) + [''])

    def __init__(self, raw_patch):
        """
        :param raw_patch:
            The patch as text.
        """
        self._raw = raw_patch

    def wp_parsed(self):
        """
        :return:
            Returns a whatthepatch parsed patch.
        """
        return wp.parse_patch(self._raw)

    def apply(self, content, parsed_patch=None):
        """
        Apply the wp parsed patch on content.

        :param content:
            The original content of the file.
        :param parsed_patch:
            The wp parsed patch object.
        :return:
            The resulting file contents.
        """
        if parsed_patch is None:
            parsed_patch = self.wp_parsed()

        # assumes all the individual diffs can
        # work incrementally over the same text.
        # diffs from coala core support this.
        for diff in parsed_patch:
            content = coalaPatch.apply_diff(diff, content)
            content = coalaPatch.join_parts(content)

        return content

    @staticmethod
    def apply_diff(diff, content):
        """
        :param content:
            The original content of the file.
        :return:
            The resulting file contents.
        """
        return wp.apply_diff(diff, content, False)


class TextEdit:
    """
    TextEdit is an Language Server protocol
    entity that represents a diff to be
    performed on the contents of the file in
    the editor.
    """

    @staticmethod
    def replace_all(old, new):
        """
        Change the contents in the editor
        by replacing all the content.

        :param old:
            The content in the editor.
        :param new:
            The content to be replaced with
            in the editor.
        :return:
            Returns the TextEdit instance.
        """
        old_lines = old.splitlines()
        old_lines_len = len(old_lines)
        old_end_char = len(old_lines[-1])

        replace_range = {
            'start': {
                'line': 0,
                'character': 0,
            },

            'end': {
                'line': old_lines_len,
                'character': old_end_char,
            }
        }

        return TextEdit(replace_range, new)

    def __init__(self, sel_range, new_text):
        """
        :param sel_range:
            The range of the text to modify.
        :param new_text:
            The new text to change the selected
            range with.
        """
        self._text_edit = {
            'range': sel_range,
            'newText': new_text,
        }

    def get(self):
        """
        :return:
            Returns the raw TextEdit map.
        """
        return self._text_edit


class TextEdits:
    """
    Equivalent to TextEdit[] of the Language
    Server protocol. It handles a collection
    of TextEdits.
    """

    def __init__(self, edits=[]):
        """
        :param edits:
            The collection of edits. They
            should be instances of TextEdit.
        """
        self._edits = edits

    def add(self, edit):
        """
        Add a TextEdit instance to the collection.

        :param edit:
            The TextEdit instance to add.
        """
        self._edits.append(edit)

    def get(self):
        """
        :return:
            Returns the list of raw TextEdits ready
            to be jsonified.
        """
        return map(lambda l: l.get(), self._edits)
